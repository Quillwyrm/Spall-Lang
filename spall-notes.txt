SPALL ‚Äî Sequential Pixel Art Layer Language
A declarative instruction stream for procedural pixel tiles, inspired by minimal stack languages (PostScript, Forth), BASIC, and ASM.

Buffers: TMP & MAIN
TMP = the current OP in isolation (CIRC 4 4 4; TMP = just the drawn circ), TMP is a virtual scratch buffer; never survives unless explicitly saved ( CIRC 4 4 4 : circ1 )

MAIN = the current CUMULATIVE buffer, that TMP's merge into (the TILE at each stage, with all OP's applied)

üß† Merge Rules (Finalized)
Situation	Result
TMP is used (e.g. ERASE MASK)	TMP is consumed, no merge
TMP is saved (: foo)	TMP is captured, no merge
TMP is left unbound	Next op triggers implicit merge
TMP is last op in script	Auto-merge to MAIN unless named


üîÅ Full project Stack-flow
Layer	         Role
Your DSL	 Concise 1-bit graphics IR
Transpiler	 Converts IR tokens into Lua function calls
Lua API	         Executes the buffer mutations
Matrix<int>	 The backing data structure for tiles


üßæ Canonical Prefixes
Prefix	Meaning
>	Global directive / config block
:	Reusable block definition
#	Output tile definition



-- Example
: RadialMask 8 8  -- Bind a Block name and size (w,h)
  CIRC 4 4 3
  GRID 8 8
  ERASE MASK 

# Tile0 8 8       -- Bind a Tile name and size (outputs a .png)
  RECT 0 0 8 8
  ERASE RadialMask 
  LINE 0 0 7 7

----------------
> TILESIZE 8 8
> COLORS
  C1 #121212 : blk
  C2 #ffffff : wht
  C3 #ff0044 : red

: EyeFlash
  CIRC 4 4 3 red
  CIRC 4 4 2 blk
  ERASE MASK

# idle_face
  RECT 0 0 8 8 blk
  EyeFlash ERASE
  LINE 0 0 7 7 wht

-----------------

> TILESIZE 8 8

> COLORS
  C1 #000000 : blk
  C2 #ffffff : wht
  C3 #ff0044 : red
  C4 #44ccff : ice

: SparkCore
  CIRC 4 4 2 red
  CIRC 4 4 1 ice
  ERASE MASK

: CrossLines
  LINE 0 0 7 7 : diag1
  LINE 0 7 7 0 : diag2
  MELD diag1 diag2 OR : cross

: FrameBox
  RECT 0 0 8 8 blk
  RECT 1 1 6 6 wht
  ERASE MASK

# charged_core
  SparkCore         -- draws into MAIN
  CrossLines ERASE  -- uses TMP 'cross' to erase
  FrameBox          -- composite border


üéõÔ∏è Spall REPL Editor Flow (Love2D + Lua)
1. Text Input
User types Spall code into your IMGUI multiline textbox.

2. Transpile
On "Run" button:

Save the code to temp.spall

Transpile it to out.lua using your Spall compiler

3. Auto-wrap Return
At the end of out.lua, emit:

lua
Copy
Edit
return tiles
Where tiles is a Dict<String, Frame> (e.g. { hello_dot = MAIN })

4. Load & Execute
In your editor:

lua
Copy
Edit
local tiles = loadfile("out.lua")()
local tile = tiles["hello_dot"]
drawFrame(tile)
5. Display Output
Render the tile with your drawFrame() or drawMatrix() function in Love2D

Optionally allow selecting between multiple tile outputs (# name blocks)

‚úÖ Benefits
Simple: no runtime VM, no eval hell

Pure: the Lua file just returns data

Composable: supports multiple tiles

Fast: transpile, load, draw ‚Äî done